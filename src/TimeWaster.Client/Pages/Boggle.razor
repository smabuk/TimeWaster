@page "/boggle"
@page "/boggle/{boggleType}"
@page "/boggle/{boggleType}/{noOfPlayers:int}"
@inherits BoggleBase
<h3>Boggle</h3>

<div class="">
    <div class="row my-auto">
        <div class="mt-xl-2 @(NoOfPlayers == 1 ? "col-xl" : "col-xl-auto mr-xl-auto")">
            <div class="card bg-gradient-warning board m-auto rounded">
                <table class="table table-sm">
                    @for (int row = 0; row < BoardSize; row++)
                    {
                        <tr class="cell">
                            @for (int col = 0; col < BoardSize; col++)
                            {
                                var die = BoggleSet.Board[row + (col * BoardSize)];
                                string showorientation = ("MNWZ".Contains(die.FaceValue.Display)) ? "ShowOrientation" : "";
                                string dieClass = $"rot{die.Orientation}";
                                <td class="d-table-cell">
                                    <div class="card rounded @dieClass slot"><div class="rounded-circle @showorientation die text-primary">@die.FaceValue.Display</div></div>
                                </td>
                            }
                        </tr>
                    }
                </table>
            </div>
        </div>
        @if (NoOfPlayers == 2)
        {
            <div class="col-xl-auto mt-xl-2 mt-5">
                <div class="card bg-gradient-warning board m-auto rounded">
                    <table class="table table-sm">
                        @for (int row = BoardSize - 1; row >= 0; row--)
                        {
                            <tr class="cell">
                                @for (int col = BoardSize - 1; col >= 0; col--)
                                {
                                    var die = BoggleSet.Board[row + (col * BoardSize)];
                                    string showorientation = ("MNWZ".Contains(die.FaceValue.Display)) ? "ShowOrientation" : "";
                                    string dieClass = $"rot-reverse-{die.Orientation}";
                                    <td class="d-table-cell">
                                        <div class="card rounded @dieClass slot"><div class="rounded-circle @showorientation die text-primary">@die.FaceValue.Display</div></div>
                                    </td>
                                }
                            </tr>
                        }
                    </table>
                </div>
            </div>
        }
    </div>
</div>

<button @onclick="Shake">Shake</button>

<pre>
Debug: BoggleType = @BoggleType
Debug: NoOfPlayers = @NoOfPlayers
Debug: BoggleSetType = @BoggleSetType
Debug: No of dice = @BoggleSet.NoOfDiceOnBoard
</pre>

<style>
.board {
    background-color: orange;
    width: @(BoardSize + (BoardSize * (DieSize / 2)))rem;
    height: @(BoardSize + (BoardSize * (DieSize / 2)))rem;
}
.slot {
    width: @(DieSize / 2)rem;
    height: @(DieSize / 2)rem;
    border: thin solid;
    display: inline-block;
    margin: 3px;
}
.die {
    display: flex;
    justify-content: center;
    align-content: center;
    font-size: @(DieFontSize / 2)rem;
    font-weight: bold;
}

@@media (min-width: 768px) {
    .board {
        width: @(BoardSize + (BoardSize * DieSize))rem;
        height: @(BoardSize + (BoardSize * DieSize))rem;
    }
    .slot {
        width: @(DieSize)rem;
        height: @(DieSize)rem;
    }
    .die {
        font-size: @(DieFontSize)rem;
    }
}



.ShowOrientation {
    text-decoration: underline;
    text-decoration: underline dashed #808080;
}

.rot0 {
    transform: rotate(0deg);
}
.rot90 {
    transform: rotate(90deg);
}
.rot180 {
    transform: rotate(180deg);
}
.rot270 {
    transform: rotate(270deg);
}

.rot-reverse-0 {
    transform: rotate(180deg);
}
.rot-reverse-90 {
    transform: rotate(270deg);
}
.rot-reverse-180 {
    transform: rotate(0deg);
}
.rot-reverse-270 {
    transform: rotate(90deg);
}
</style>
